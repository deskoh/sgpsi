{"version":3,"sources":["Feathers.ts","components/Reading.tsx","github.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","io","client","feathers","configure","socketio","ReadingService","service","Reading","value","updatedAt","className","moment","fromNow","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","_ref3","d","_ref","svgRef","title","props","role","viewBox","ref","undefined","ForwardRef","forwardRef","App","useState","setValue","createdAt","setCreatedAt","useEffect","cb","reading","on","fetch","then","response","json","data","removeListener","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAIMA,EAASC,IAAG,KACZC,EAASC,MAEfD,EAAOE,UAAUC,IAASL,IAEnB,IAAMM,EAAiBJ,EAAOK,QAAQ,W,iBCa9BC,EAdyB,SAAC,GAA8B,IAAD,IAA3BC,aAA2B,MAAnB,EAAmB,EAAhBC,EAAgB,EAAhBA,UACpD,OACE,oCACE,4CACA,2BACE,0BAAMC,UAAU,iBAAiBF,IAEnC,uBAAGE,UAAU,kBACVD,GAAS,kBAAeE,IAAOF,GAAWG,cChBnD,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAIoB,EAEJ,IAAMC,cAAc,QAAS,KAAM,eAE/BC,EAEJ,IAAMD,cAAc,OAAQ,CAC1BE,EAAG,6sBAGD,EAAY,SAAmBC,GACjC,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQhB,EAAyBa,EAAM,CAAC,SAAU,UAEtD,OAAO,IAAMH,cAAc,MAAOxB,EAAS,CACzC+B,KAAM,MACNC,QAAS,YACTC,IAAKL,GACJE,QAAkBI,IAAVL,EAAsBN,EAAQ,IAAMC,cAAc,QAAS,KAAMK,GAAQJ,IAGlFU,EAAa,IAAMC,YAAW,SAAUN,EAAOG,GACjD,OAAO,IAAMT,cAAc,EAAWxB,EAAS,CAC7C4B,OAAQK,GACPH,OCkBUO,GDhBA,I,MC5BO,WAAO,IAAD,EACAC,mBAAS,GADT,mBACnB3C,EADmB,KACZ4C,EADY,OAEQD,mBAAS,IAFjB,mBAEnBE,EAFmB,KAERC,EAFQ,KAwB1B,OApBAC,qBAAU,WACR,IAAMC,EAAK,SAACC,GACVL,EAASK,EAAQjD,OACjB8C,EAAaG,EAAQJ,YAavB,OAXAhD,EAAeqD,GAAG,UAAWF,GAE7BG,MAAM,cACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,YAAe,IAAZG,EAAW,EAAXA,KACHA,EAAK,KACPX,EAASW,EAAK,GAAGvD,OACjB8C,EAAaS,EAAK,GAAGV,eAIpB,WACLhD,EAAe2D,eAAe,UAAWR,MAE1C,IAED,yBAAK9C,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAASF,MAAOA,EAAOC,UAAW4C,KAEpC,4BAAQ3C,UAAU,cAChB,uBACEA,UAAU,WACVuD,KAAK,kCACLjD,OAAO,SACPkD,IAAI,uBAEJ,kBAAC,EAAD,CAAYxD,UAAU,aANxB,cCzBYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.a026ed94.chunk.js","sourcesContent":["import io from 'socket.io-client';\nimport feathers from '@feathersjs/feathers';\nimport socketio from '@feathersjs/socketio-client';\n\nconst socket = io('/');\nconst client = feathers();\n\nclient.configure(socketio(socket));\n\nexport const ReadingService = client.service('reading');\n\nexport default client;\n","import React from 'react';\nimport moment from 'moment';\n\ninterface ReadingProps {\n  value?: number,\n  updatedAt: string,\n}\n\nconst Reading: React.FC<ReadingProps> = ({ value = 0, updatedAt }) => {\n  return (\n    <>\n      <p>PM2.5 reading</p>\n      <p>\n        <code className=\"Reading-value\">{value}</code>\n      </p>\n      <p className=\"Reading-footer\">\n        {updatedAt && `Updated ${moment(updatedAt).fromNow()}`}\n      </p>\n    </>\n  );\n}\n\nexport default Reading;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"title\", null, \"GitHub icon\");\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"\n});\n\nvar SvgGithub = function SvgGithub(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    role: \"img\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef\n  }, props), title === undefined ? _ref2 : React.createElement(\"title\", null, title), _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGithub, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/github.617870e4.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from 'react';\n\nimport { ReadingService } from './Feathers';\nimport Reading from './components/Reading';\nimport { ReactComponent as GitHubIcon } from './github.svg';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState(0);\n  const [createdAt, setCreatedAt] = useState('');\n\n  useEffect(() => {\n    const cb = (reading: any) => {\n      setValue(reading.value);\n      setCreatedAt(reading.createdAt);\n    };\n    ReadingService.on('created', cb);\n\n    fetch('/reading/1')\n      .then((response) => response.json())\n      .then(({ data }) => {\n        if (data[0]) {\n          setValue(data[0].value);\n          setCreatedAt(data[0].createdAt);\n        }\n    });\n\n    return () => {\n      ReadingService.removeListener('created', cb)\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Reading value={value} updatedAt={createdAt} />\n      </header>\n      <footer className=\"App-footer\">\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/deskoh/sgpsi\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <GitHubIcon className=\"App-logo\" />\n          Source\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}